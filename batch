#------------------------------------------------------------------------------------
# SCRIPT: Process-All-Files.ps1
# PURPOSE: Loops through all .txt files in an input folder, uses a memory-efficient
#          stream process to replace '~' with ',', and saves new files to an output folder.
#------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------
# ==> STEP 1: CONFIGURE YOUR FOLDER PATHS HERE
#------------------------------------------------------------------------------------
# 1. The folder containing your 30 split text files.
$inputFolder = "C:\Path\To\Your\Input_Files"

# 2. The folder where the new, converted files will be saved.
$outputFolder = "C:\Path\To\Your\Output_Files"
#------------------------------------------------------------------------------------


# --- SCRIPT LOGIC (No need to edit below this line) ---

# --- Validation and Setup ---
Write-Host "Starting batch conversion process..." -ForegroundColor Cyan

if (-not (Test-Path -Path $inputFolder -PathType Container)) {
    Write-Error "FATAL ERROR: The specified input folder does not exist: $inputFolder"
    return # Stop the script
}

# Create the output directory if it doesn't exist
if (-not (Test-Path -Path $outputFolder -PathType Container)) {
    Write-Host "Output folder not found. Creating it now: $outputFolder"
    New-Item -ItemType Directory -Force -Path $outputFolder | Out-Null
}

# --- Main Processing Loop ---
# Get all files ending with .txt in the input folder
$filesToProcess = Get-ChildItem -Path $inputFolder -Filter "*.txt"

if ($filesToProcess.Count -eq 0) {
    Write-Warning "No .txt files were found in the input folder: $inputFolder"
    return
}

$totalFiles = $filesToProcess.Count
$fileCounter = 0
$globalStartTime = Get-Date

Write-Host "Found $totalFiles text files to process." -ForegroundColor Green

# Loop through each file found
foreach ($file in $filesToProcess) {
    $fileCounter++
    
    # --- This is the core logic from your working script, adapted for the loop ---
    
    # Define paths for the current file in the loop
    $currentInputPath = $file.FullName
    $outputFileName = "$($file.BaseName)_converted.txt"
    $currentOutputPath = Join-Path -Path $outputFolder -ChildPath $outputFileName

    Write-Host "`n[$fileCounter of $totalFiles] Processing $($file.Name)..."
    
    # Initialize variables for this file
    $reader = $null
    $writer = $null
    $lineNumber = 0
    $startTime = Get-Date

    try {
        # Create the low-level file reader and writer for the current file
        $reader = [System.IO.StreamReader]::new($currentInputPath)
        $writer = [System.IO.StreamWriter]::new($currentOutputPath)

        # Loop through the current file line-by-line
        while (-not $reader.EndOfStream) {
            $line = $reader.ReadLine()
            $modifiedLine = $line.Replace('~', ',')
            $writer.WriteLine($modifiedLine)
            $lineNumber++
            
            # Update progress bar for the current file
            if ($lineNumber % 100000 -eq 0) {
                $percent = ($reader.BaseStream.Position / $reader.BaseStream.Length) * 100
                Write-Progress -Activity "Processing File: $($file.Name)" -Status "On line $lineNumber" -PercentComplete $percent
            }
        }
    }
    finally {
        # IMPORTANT: Close the file streams for the current file
        if ($writer -ne $null) { $writer.Close(); $writer.Dispose() }
        if ($reader -ne $null) { $reader.Close(); $reader.Dispose() }
    }

    $endTime = Get-Date
    $duration = New-TimeSpan -Start $startTime -End $endTime
    Write-Host "  -> Finished in $($duration.ToString('g')). Output saved to: $outputFileName" -ForegroundColor Gray
    Write-Progress -Activity "Overall Progress" -Status "Completed $fileCounter of $totalFiles files." -PercentComplete (($fileCounter / $totalFiles) * 100)
}

$globalEndTime = Get-Date
$globalDuration = New-TimeSpan -Start $globalStartTime -End $globalEndTime

Write-Host "`n--- Batch Processing Complete! ---" -ForegroundColor Green
Write-Host "Total files converted: $fileCounter"
Write-Host "Total time taken: $($globalDuration.ToString('g'))"
