# --- Script Starts Here ---

#--------------------------------------------------------------------
# --- CONFIGURATION ---
# ==> CHANGE THESE TWO LINES TO MATCH YOUR FILE NAMES
#--------------------------------------------------------------------
$inputFile = "input_file.txt"
$outputFile = "output_file.txt"
#--------------------------------------------------------------------

# This special variable gets the directory where the script itself is located.
$scriptDirectory = $PSScriptRoot

# Create the full, absolute paths to the files.
$inputPath = Join-Path -Path $scriptDirectory -ChildPath $inputFile
$outputPath = Join-Path -Path $scriptDirectory -ChildPath $outputFile

# --- VALIDATION ---
# Check if the input file actually exists before we start.
if (-not (Test-Path -Path $inputPath -PathType Leaf)) {
    Write-Error "FATAL ERROR: The input file was not found at the expected path."
    Write-Error "Expected Path: $inputPath"
    Write-Error "Please make sure the file name in the script's CONFIGURATION section is correct and the file is in the same folder as the script."
    # Stop the script
    return
}

Write-Host "Starting file conversion..."
Write-Host "Input File:  $inputPath"
Write-Host "Output File: $outputPath"

# Initialize variables for streaming and progress tracking
$reader = $null
$writer = $null
$lineNumber = 0
$startTime = Get-Date

try {
    # Create the low-level file reader and writer
    $reader = [System.IO.StreamReader]::new($inputPath)
    $writer = [System.IO.StreamWriter]::new($outputPath)

    # Loop through the file line-by-line until we reach the end
    while (-not $reader.EndOfStream) {
        $line = $reader.ReadLine()
        
        # Perform the replacement on the single line
        $modifiedLine = $line.Replace('~', ',')
        
        # Write the modified line to the output file
        $writer.WriteLine($modifiedLine)
        
        $lineNumber++
        
        # Update progress every 100,000 lines to avoid slowing things down
        if ($lineNumber % 100000 -eq 0) {
            $percent = ($reader.BaseStream.Position / $reader.BaseStream.Length) * 100
            Write-Progress -Activity "Converting File" -Status "Processing line $lineNumber" -PercentComplete $percent
        }
    }
}
finally {
    # IMPORTANT: Always close the file streams to release the files.
    # This block is now correctly formatted.
    if ($writer -ne $null) {
        $writer.Close()
        $writer.Dispose()
    }
    if ($reader -ne $null) {
        $reader.Close()
        $reader.Dispose()
    }
}

$endTime = Get-Date
$duration = New-TimeSpan -Start $startTime -End $endTime

Write-Host "" # New line for cleaner output
Write-Host "--- Conversion Complete! ---" -ForegroundColor Green
Write-Host "Total lines processed: $lineNumber"
Write-Host "Total time taken: $($duration.ToString('g'))"
# --- Script End
s Here ---
